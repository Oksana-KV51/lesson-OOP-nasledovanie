#инкапсуляция
#Публичный или открытый уровень доступа. С его помощью можно делать открытые атрибуты и открытые методы.
# Стандартный уровень доступа для членов класса, если явно не указывается другой.
#К таким методам и атрибутам можно обращаться из любого места в коде, где есть доступ к экземпляру
# класса. Это самые обычные атрибуты и самые обычные методы.
#Использование таких открытых атрибутов подразумевает, что они будут формировать официальный интерфейс класса,
# который не будет изменяться без серьезных оснований.

#self.public_test = “test”

#Защищенный уровень доступа. Разрешает доступ к атрибутам и методам из самого класса, из всех классов
# производных от него и из классов в том же пакете.

#self._public_test = “test”

#Одно нижнее подчеркивание обозначает, что в этом месте защищенный уровень доступа. Теперь доступ к данному
# атрибуту будет только из самого класса, из классов производных от него и еще раз из классов в том же пакете.

#Приватный уровень доступа. Атрибуты и методы доступны только из кода того класса, в котором они объявлены
# (созданы).

#self.__public_test = “test”


class Test():
    def __init__(self):
        self.public = 'публичный атрибут'
        self._protected = 'защищенный атрибут'
        self.__privat = 'приватный атрибут'

    def get_privat(self):# геттер берет информацию
        return self.__privat

    def set_privat(self, value):
        self.__privat = value





test = Test()
print(test.public)
print(test._protected)
#print(test.__privat)
print(test.get_privat())
test.get_privat = 'получили значение приватного атрибута'

print(test.get_privat)

class Test1():
    def public_func(self):
        print('публичный метод')

    def _protected_func(self):
        print('защищенный метод')

    def __private_func(self):
        print('приватный метод')

    def test_priv(self):
        self.__private_func()


test1 = Test1()
test1.public_func()
test1._protected_func()
#test1.__private_func
test1.test_priv()